unit TestThCanvasEditor;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, ThContainer, ThCanvasEditor,
  System.Types, System.Classes, System.SysUtils, System.UITypes, FMX.Forms,
  FMX.Types;

type
  // Test methods for class TThCanvasEditor

  TestTThCanvasEditor = class(TTestCase)
  strict private
    FForm: TForm;
    FCanvas: TThCanvasEditor;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestTracking50To200;
  end;

implementation

uses
  UnitTestForm, FMX.TestLib;

procedure TestTThCanvasEditor.SetUp;
begin
  FForm := TfrmUnitTest.Create(nil);
  FForm.Width := 600;
  FForm.Height := 600;
  FForm.Top := 100;
  FForm.Left := 100;
  FForm.Show;

  FCanvas := TThCanvasEditor.Create(FForm);
  FCanvas.Parent := FForm;
  FCanvas.Width := 300;
  FCanvas.Height := 300;
  FCanvas.Position.Point := PointF(50, 50);

  Application.ProcessMessages;
end;

procedure TestTThCanvasEditor.TearDown;
begin
  FCanvas.Free;
  FForm.Free;
end;

procedure TestTThCanvasEditor.TestTracking50To200;
var
  I: Integer;
  P: TPointF;
  Path: array of TPointF;
begin
  SetLength(Path, 5);

  Path[0] := PointF(50, 50);
  Path[1] := PointF(100, 100);
  Path[2] := PointF(100, 150);
  Path[3] := PointF(150, 150);
  Path[4] := PointF(200, 200);

//  P := FCanvas.LocalToAbsolute(PointF(0, 0));
  P := IControl(FCanvas).LocalToScreen(PointF(0, 0));

  for I := Low(Path) to High(Path) do
  begin
    if I = Low(Path) then
      TestLib.MouseDown(TMouseButton.mbLeft, [], P.X + Path[I].X, P.Y + Path[I].Y)
    else if I = High(Path) then
      TestLib.MouseUp(TMouseButton.mbLeft, [], P.X + Path[I].X, P.Y + Path[I].Y)
    else
      TestLib.MouseMove([], P.X + Path[I].X, P.Y + Path[I].Y)
    ;
    Application.ProcessMessages;
  end;

  Check(
    (FCanvas.ContentPos.X = (Path[High(Path)].X - Path[Low(Path)].X)) and (FCanvas.ContentPos.X = (Path[High(Path)].Y - Path[Low(Path)].Y))
    , Format('FCanvas.Postion : %f, %f', [FCanvas.ContentPos.X, FCanvas.ContentPos.X])
  );
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTThCanvasEditor.Suite);
end.

