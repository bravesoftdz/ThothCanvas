unit TestThLine;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, BaseTestUnit, FMX.Types, FMX.Forms,
  System.UITypes, System.Types, System.SysUtils, FMX.Controls, System.UIConsts;

type
  // #19 캔버스에 선을 추가한다.
  TestTThLine = class(TBaseTestUnit)
  private
  published
    procedure TestItemFactory;

    // #74 마우스 드래그로 시작점과 끝점을 이용해 도형을 그린다.
    procedure TestDrawLineTLtoBR;
    // #75 끝점이 시작점의 앞에 있어도 그려져야 한다.
    procedure TestDrawLineTRtoBL;
    procedure TestDrawLineBLtoTR;
    procedure TestDrawLineBRtoTL;

    // #76 도형에 마우스 오버시 하이라이트 효과가 나타난다.
    procedure TestLineMouseOverHighlight;

    // #99 선을 넘어서는 일직선 범위를 클릭 시 선이 선택된다.
    procedure BugTestLineOutOfRange;

    // #98 선이 아닌 다른 지역에 대해 선택이 되지 않아야 한다.
    procedure TestLineSelectionRange;

    // #97 수직선, 수평선을 그릴 수 있어야 한다.
    procedure TestLineHorizon;
    procedure TestLineVertical;

    // #77 최소 크기를 갖으며 그리거나 크기조정 시 반영된다.
    procedure TestLineMinumumSize;

    // #43 선의 일정간격 내에서도 마우스로 선택되어야 한다.
    procedure TestRangeSelectLineTLtoBR;
    procedure TestRangeSelectLineTRtoBL;

    // #43 선의 일정간격 내에서도 마우스로 선택되어야 한다. -II
    procedure TestRangeSelectHorizonOverY;
    procedure TestRangeSelectVerticalOverX;

//    procedure TestSelectLineOverXY;
  end;

implementation

uses
  FMX.TestLib, ThItem, ThShape, ThItemFactory, ThConsts;

{ TestTThShape }

procedure TestTThLine.TestItemFactory;
var
  Item: TThItem;
begin

  // Not assigned number 0
  Item := ItemFactory.Get(0);
  try
    Check(not Assigned(Item));
  finally
    if Assigned(Item) then
      Item.Free;
  end;

  // 1100 is Rectangle
  Item := ItemFactory.Get(1200);
  try
    Check(Assigned(Item));
  finally
    if Assigned(Item) then
      Item.Free;
  end;
end;

procedure TestTThLine.TestDrawLineTLtoBR;
begin
  // TopLeft > BottomRight
  DrawLine(10, 10, 100, 100);

  Check(TestLib.GetControlPixelColor(FCanvas, 20, 20) = ItemShapeDefaultColor, 'TopLeft > BottomRight - 1');
  Check(TestLib.GetControlPixelColor(FCanvas, 90, 90) = ItemShapeDefaultColor, 'TopLeft > BottomRight - 2');
end;

procedure TestTThLine.TestDrawLineTRtoBL;
begin
  // TopRight > BottomLeft
  DrawLine(100, 10, 10, 100);

  Check(TestLib.GetControlPixelColor(FCanvas, 90, 20) = ItemShapeDefaultColor, 'TopRight > BottomLeft - 1');
  Check(TestLib.GetControlPixelColor(FCanvas, 20, 90) = ItemShapeDefaultColor, 'TopRight > BottomLeft - 2');

end;

procedure TestTThLine.TestDrawLineBLtoTR;
begin
  // BottomLeft > TopRight
  DrawLine(10, 100, 100, 10);

  Check(TestLib.GetControlPixelColor(FCanvas, 20, 90) = ItemShapeDefaultColor, 'BottomLeft > TopRight - 1');
  Check(TestLib.GetControlPixelColor(FCanvas, 90, 20) = ItemShapeDefaultColor, 'BottomLeft > TopRight - 2');
end;

procedure TestTThLine.TestDrawLineBRtoTL;
begin
  // BottomRight > TopLeft
  DrawLine(100, 100, 10, 10);

  Check(TestLib.GetControlPixelColor(FCanvas, 20, 20) = ItemShapeDefaultColor, 'BottomRight > TopLeft - 1');
  Check(TestLib.GetControlPixelColor(FCanvas, 90, 90) = ItemShapeDefaultColor, 'BottomRight > TopLeft - 2');
end;

procedure TestTThLine.TestRangeSelectLineTLtoBR;
var
  Rect: TRectF;
  P, P2: TPointF;
  D: Single;
  R: Single;
begin
//DebugShowForm;

  Rect := RectF(10, 10,100, 100);
  DrawLine(Rect);

  D := (ItemLineThickness - 1) / 2;
  P := PointF(Rect.Left + (Rect.Width / 2), Rect.Top + (Rect.Height / 2));
  R := ArcTan(Rect.Height/Rect.Width);

  P2 := P;
  P2.X := P2.X - Cos(R) * D;
  P2.Y := P2.Y - Sin(R) * D;
  TestLib.RunMouseClick(200, 200);
  TestLib.RunMouseClick(P2.X, P2.Y);
  Check(Assigned(FCanvas.SelectedItem), Format('D Point(%f, %f)', [P2.X, P2.Y]));

  P2 := P;
  P2.X := P2.X - R / Cos(R);
  TestLib.RunMouseClick(200, 200);
  TestLib.RunMouseClick(P2.X, P2.Y);
  Check(Assigned(FCanvas.SelectedItem), Format('D Left(%f, %f)', [P2.X, P2.Y]));

  P2 := P;
  P2.Y := P2.Y - R / Sin(R);
  TestLib.RunMouseClick(200, 200);
  TestLib.RunMouseClick(P2.X, P2.Y);
  Check(Assigned(FCanvas.SelectedItem), Format('D Top(%f, %f)', [P2.X, P2.Y]));

  P2 := P;
  P2.X := P2.X + R / Cos(R);
  TestLib.RunMouseClick(200, 200);
  TestLib.RunMouseClick(P2.X, P2.Y);
  Check(Assigned(FCanvas.SelectedItem), Format('D Right(%f, %f)', [P2.X, P2.Y]));

  P2 := P;
  P2.Y := P2.Y + R / Sin(R);
  TestLib.RunMouseClick(200, 200);
  TestLib.RunMouseClick(P2.X, P2.Y);
  Check(Assigned(FCanvas.SelectedItem), Format('D Bottom(%f, %f)', [P2.X, P2.Y]));

  P2 := Rect.TopLeft;
  P2.X := P2.X - Cos(R) * D;
  P2.Y := P2.Y + Sin(R) * D;
  TestLib.RunMouseClick(200, 200);
  TestLib.RunMouseClick(P2.X, P2.Y);
  Check(Assigned(FCanvas.SelectedItem), Format('TopLeft Left(%f, %f)', [P2.X, P2.Y]));

  P2 := Rect.TopLeft;
  P2.X := P2.X - Cos(R) * D + 1;
  P2.Y := P2.Y + Sin(R) * D - 1;
  TestLib.RunMouseClick(200, 200);
  TestLib.RunMouseClick(P2.X, P2.Y);
  Check(Assigned(FCanvas.SelectedItem), Format('TopLeft > Left > Top(%f, %f)', [P2.X, P2.Y]));

  P2 := Rect.TopLeft;
  P2.X := P2.X - Cos(R) * D + 1;
  P2.Y := P2.Y + Sin(R) * D + 1;
  TestLib.RunMouseClick(200, 200);
  TestLib.RunMouseClick(P2.X, P2.Y);
  Check(Assigned(FCanvas.SelectedItem), Format('TopLeft > Left > Bottom(%f, %f)', [P2.X, P2.Y]));

  P2 := Rect.TopLeft;
  P2.X := P2.X + Cos(R) * D;
  P2.Y := P2.Y - Sin(R) * D;
  TestLib.RunMouseClick(200, 200);
  TestLib.RunMouseClick(P2.X, P2.Y);
  Check(Assigned(FCanvas.SelectedItem), Format('TopLeft Top(%f, %f)', [P2.X, P2.Y]));

  P2 := Rect.TopLeft;
  P2.X := P2.X + Cos(R) * D - 1;
  P2.Y := P2.Y - Sin(R) * D + 1;
  TestLib.RunMouseClick(200, 200);
  TestLib.RunMouseClick(P2.X, P2.Y);
  Check(Assigned(FCanvas.SelectedItem), Format('TopLeft > Top > Left(%f, %f)', [P2.X, P2.Y]));

  P2 := Rect.TopLeft;
  P2.X := P2.X + Cos(R) * D + 1;
  P2.Y := P2.Y - Sin(R) * D + 1;
  TestLib.RunMouseClick(200, 200);
  TestLib.RunMouseClick(P2.X, P2.Y);
  Check(Assigned(FCanvas.SelectedItem), Format('TopLeft > Top > Right(%f, %f)', [P2.X, P2.Y]));

  P2 := Rect.TopLeft;
  P2.X := P2.X - Cos(R) * D;
  P2.Y := P2.Y - Sin(R) * D;
  TestLib.RunMouseClick(200, 200);
  TestLib.RunMouseClick(P2.X, P2.Y);
  Check(Assigned(FCanvas.SelectedItem), Format('TopLeft TopLeft(%f, %f)', [P2.X, P2.Y]));
end;

procedure TestTThLine.TestRangeSelectLineTRtoBL;
begin
  DrawLine(100, 10,10, 100);

  TestLib.RunMouseClick(55, 55);

  Check(Assigned(FCanvas.SelectedItem));
end;

procedure TestTThLine.TestLineMouseOverHighlight;
var
  AC: TAlphaColor;
begin
  // 추가
  DrawLine(10, 10, 100, 100);
  // 선택
  TestLib.RunMouseClick(50, 50);

  FCanvas.BackgroundColor := claPink;

  // 선택해제
  TestLib.RunMouseClick(150, 150);
  AC := TestLib.GetControlPixelColor(FCanvas, 100 + (ItemHighlightSize - 1), 100 + (ItemHighlightSize - 1));
  Check(AC <> ItemHighlightColor, 'Color is not highlight color');

  MousePath.New
  .Add(150, 150)
  .Add(50, 50);
//  .Add(101, 101);
  TestLib.RunMouseMove(MousePath.Path);

  // 그림자 확인
  AC := TestLib.GetControlPixelColor(FCanvas, 100 + (ItemHighlightSize), 100 + (ItemHighlightSize));
  Check(AC = ItemHighlightColor, 'Not matching Color');
//  Check(AC = claGray, 'Not matching Color');
end;

procedure TestTThLine.BugTestLineOutOfRange;
begin
  // 추가
  DrawLine(10, 10, 100, 100);

  // 영역외 선택
  TestLib.RunMouseClick(150, 150);

  Check(not Assigned(FCanvas.SelectedItem), 'Out of range');

  // 선택
  TestLib.RunMouseClick(50, 50);

  // 선택해제
  TestLib.RunMouseClick(150, 150);

  Check(not Assigned(FCanvas.SelectedItem), 'Unselect');
end;

procedure TestTThLine.TestLineSelectionRange;
begin
  // 추가
  DrawLine(10, 10, 100, 100);

  // 선택 범위 외 선택
  TestLib.RunMouseClick(60, 50);
  CheckNull(FCanvas.SelectedItem, 'Invalid select area');

  // 선택
  TestLib.RunMouseClick(50, 50);
//  CheckTrue(Assigned(FCanvas.SelectedItem));
  CheckNotNull(FCanvas.SelectedItem);
end;

procedure TestTThLine.TestLineHorizon;
begin
  DrawLine(10, 200, 20, 200);

  Check(TestLib.GetControlPixelColor(FCanvas, 10, 197) = ItemShapeDefaultColor, 'Start');
  Check(TestLib.GetControlPixelColor(FCanvas, 20, 197) = ItemShapeDefaultColor, 'End');
end;

procedure TestTThLine.TestLineVertical;
begin
  DrawLine(10, 10, 10, 20);

  Check(TestLib.GetControlPixelColor(FCanvas, 7, 10) = ItemShapeDefaultColor, 'Start');
  Check(TestLib.GetControlPixelColor(FCanvas, 7, 20) = ItemShapeDefaultColor, 'End');
end;

procedure TestTThLine.TestLineMinumumSize;
begin
  // 추가
  DrawLine(10, 10, 20, 10);

  TestLib.RunMouseClick(ItemMinimumSize-1, 10);

  CheckNotNull(FCanvas.SelectedItem);
end;

procedure TestTThLine.TestRangeSelectHorizonOverY;
begin
  DrawLine(10, 10, 100, 10);

  TestLib.RunMouseClick(10, 7);
  Check(Assigned(FCanvas.SelectedItem), 'Top');

  TestLib.RunMouseClick(100, 100);
  TestLib.RunMouseClick(10, 13);
  Check(Assigned(FCanvas.SelectedItem), 'Bottom');

  TestLib.RunMouseClick(100, 100);
  TestLib.RunMouseClick(7, 10);
  Check(Assigned(FCanvas.SelectedItem), 'Left');

  TestLib.RunMouseClick(100, 100);
  TestLib.RunMouseClick(103, 10);
  Check(Assigned(FCanvas.SelectedItem), 'Right');
end;

procedure TestTThLine.TestRangeSelectVerticalOverX;
begin
  DrawLine(10, 10, 10, 100);

  TestLib.RunMouseClick(10, 7);
  Check(Assigned(FCanvas.SelectedItem), 'Top');

  TestLib.RunMouseClick(10, 13);
  Check(Assigned(FCanvas.SelectedItem), 'Right');

  TestLib.RunMouseClick(7, 10);
  Check(Assigned(FCanvas.SelectedItem), 'Left');

  TestLib.RunMouseClick(10, 103);
  Check(Assigned(FCanvas.SelectedItem), 'Bottom');
end;

initialization
  RegisterTest(TestTThLine.Suite);

end.

